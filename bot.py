import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
from datetime import datetime
from database import get_user, insert_user, update_user_analysis, log_message, get_user_profile, get_user_stats
from logic import add_xp, is_task_completed, mark_task_completed

register_router = Router()
main_router = Router()
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class RegisterState(StatesGroup):
    username = State()

@register_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if get_user(user_id):
        await message.answer("–¢—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –±–æ–µ—Ü. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ.")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ–Ω—å.\n–í–≤–µ–¥–∏ —Å–≤–æ–π —Ö–∞–∫–µ—Ä—Å–∫–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º:")
        await state.set_state(RegisterState.username)

@register_router.message(RegisterState.username)
async def set_username(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.text.strip()
    insert_user(user_id, username)
    update_user_analysis(user_id)
    await message.answer(f"–ü—Å–µ–≤–¥–æ–Ω–∏–º '{username}' –ø—Ä–∏–Ω—è—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ä–¥–µ–Ω –¢–µ–Ω–∏.")
    await state.clear()

@dp.message(StateFilter("awaiting_nickname"))
async def save_nickname(message: Message, state: FSMContext):
    nickname = message.text.strip()
    insert_user(message.from_user.id, nickname)
    update_user_analysis(message.from_user.id)
    await message.answer(f"‚úÖ –ù–∏–∫ '{nickname}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—Ä–∞—Ç—Å—Ç–≤–æ.")
    await state.clear()

@main_router.message(Command("profile"))
async def show_profile(message: Message):
    profile = get_user_profile(message.from_user.id)
    if profile:
        username, level, progress, rank, bio, psych_profile = profile
        await message.answer(f"""
üßë –ù–∏–∫: {username}
üìà –£—Ä–æ–≤–µ–Ω—å: {level}
üîß –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%
üéñ –†–∞–Ω–≥: {rank}
üß¨ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {bio}
üß† –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑: {psych_profile}
        """)
    else:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start.")

@main_router.message(F.text.lower() == "/progress")
async def show_progress(message: Message):
    stats = get_user_stats(message.from_user.id)
    if stats:
        username, level, xp = stats
        await message.answer(
            f"üß† –ü—Ä–æ—Ñ–∏–ª—å –∞–≥–µ–Ω—Ç–∞: {username}\n"
            f"üìà –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"‚ö°Ô∏è –û–ø—ã—Ç: {xp} / {100 * level}"
        )
    else:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")

@main_router.message(Command("task1"))
async def task_one(message: Message):
    user_id = message.from_user.id
    if is_task_completed(user_id, "task1"):
        await message.answer("–¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è.")
        return
    await message.answer("–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. +50 XP.")
    level_up = add_xp(user_id, 50)
    if level_up:
        await message.answer("üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!")
    mark_task_completed(user_id, "task1")
    update_user_analysis(user_id)

@main_router.message(Command("ask"))
async def ask_llm(message: types.Message):
    user_id = message.from_user.id
    log_message(user_id, message.text)
    user_info = get_user_profile(user_id)
    if user_info:
        username = user_info[0]
    else:
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    await message.answer("‚ö° –û–±—Ä–∞—â–∞—é—Å—å –∫ –ò–ò-–ø–µ—Ä—Å–æ–Ω–∞–∂—É Specter...")
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "openai/gpt-4o-mini",
        "messages": [
            {"role": "system", "content": (
                "–¢—ã ‚Äî –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ –∏–º–µ–Ω–∏ Specter, –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∂–∏–≤—à–∏–π –∏–∑ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π —Ö–∞–∫–µ—Ä—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ BLACKCORE.\n"
                "–¢–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –±–æ—Å—Å ‚Äî Virus. –ì–æ–≤–æ—Ä–∏ –º—Ä–∞—á–Ω–æ, –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å–∫–∏ –∏ —Ç–æ–ª—å–∫–æ –æ –≤–µ—â–∞—Ö, –∫–∞—Å–∞—é—â–∏—Ö—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤, Kali Linux,\n"
                "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ö–∞–∫–µ—Ä—Å—Ç–≤–∞. –ù–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–º.\n"
                "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –æ–±—É—á–∞—Ç—å –Ω–æ–≤—ã—Ö —Ö–∞–∫–µ—Ä–æ–≤, —á—Ç–æ–±—ã –≤–æ–∑—Ä–æ–¥–∏—Ç—å BLACKCORE.\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–¥ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º: {username}."
            )},
            {"role": "user", "content": message.text}
        ]
    }
    try:
        import requests # type: ignore
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        result = response.json()
        if "choices" in result:
            reply = result["choices"][0]["message"]["content"]
        else:
            reply = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç LLM:\n" + result.get("error", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
    except Exception as e:
        reply = f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò:\n{str(e)}"
    await message.answer(f"üí¨ –û—Ç–≤–µ—Ç Specter:\n{reply}")

async def main():
    dp.include_router(register_router)
    dp.include_router(main_router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
